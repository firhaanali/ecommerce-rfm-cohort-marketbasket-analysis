# -*- coding: utf-8 -*-
"""Retail Analytics: RFM, Cohort, Market Basket.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Mb0ekHNqyAX9vVQI2l4tAUza8qMLDbg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from operator import attrgetter
import warnings
import kagglehub
warnings.filterwarnings('ignore')

plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# Download and Load Data
path = kagglehub.dataset_download("carrie1/ecommerce-data")
print("Path to dataset files:", path)

import os
csv_files = [f for f in os.listdir(path) if f.endswith('.csv')]
print("Available CSV files:", csv_files)

try:
    df = pd.read_csv(os.path.join(path, csv_files[0]), encoding='utf-8')
except UnicodeDecodeError:
    try:
        df = pd.read_csv(os.path.join(path, csv_files[0]), encoding='latin-1')
        print("Loaded with latin-1 encoding")
    except UnicodeDecodeError:
        df = pd.read_csv(os.path.join(path, csv_files[0]), encoding='cp1252')
        print("Loaded with cp1252 encoding")

# Basic Data Overview
print("Dataset Shape:", df.shape)
print("\nColumn Info:")
df.info()
print("\nMissing Values:")
print(df.isnull().sum())
print("\nDuplicate Rows:", df.duplicated().sum())

# Data Cleaning
df = df.dropna()
df = df.drop_duplicates()
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']
df = df[df['Quantity'] > 0]
df = df[df['UnitPrice'] > 0]

# Basic Statistics
print("\nDescriptive Statistics:")
print(df.describe())

# Revenue Analysis
total_revenue = df['TotalPrice'].sum()
avg_order_value = df.groupby('InvoiceNo')['TotalPrice'].sum().mean()
total_transactions = df['InvoiceNo'].nunique()
total_customers = df['CustomerID'].nunique()
total_products = df['StockCode'].nunique()

print(f"\nKEY METRICS:")
print(f"Total Revenue: ${total_revenue:,.2f}")
print(f"Average Order Value: ${avg_order_value:.2f}")
print(f"Total Transactions: {total_transactions:,}")
print(f"Total Customers: {total_customers:,}")
print(f"Total Products: {total_products:,}")

# Country Sales Analysis - Histogram
country_sales = df.groupby('Country')['TotalPrice'].sum().sort_values(ascending=False)
top_10_countries = country_sales.head(10)

# Deep Ocean color palette
colors_palette_1 = ['#2E4057', '#048A81', '#54C6EB', '#B8860B', '#CD853F', '#D2B48C', '#4A90A4', '#5D737E', '#7A6B83', '#8B7765']

plt.figure(figsize=(12, 6))
fig = plt.gcf()
fig.patch.set_facecolor('#f8f9fa')

plt.bar(range(len(top_10_countries)), top_10_countries.values,
        color=colors_palette_1[:len(top_10_countries)],
        edgecolor='#2c3e50', alpha=0.85, linewidth=1.5)

plt.title('Top 10 Countries by Total Sales Revenue', fontsize=18, fontweight='bold', color='#2c3e50', pad=20)
plt.xlabel('Countries', fontsize=14, fontweight='bold', color='#34495e')
plt.ylabel('Total Sales Revenue ($)', fontsize=14, fontweight='bold', color='#34495e')
plt.xticks(range(len(top_10_countries)), top_10_countries.index, rotation=45, ha='right',
           fontsize=12, fontweight='bold', color='#2c3e50')
plt.grid(axis='y', alpha=0.3, color='#bdc3c7', linestyle='--')

for i, v in enumerate(top_10_countries.values):
    plt.text(i, v + max(top_10_countries.values) * 0.01, f'${v:,.0f}',
             ha='center', va='bottom', fontsize=10, fontweight='bold', color='#2c3e50',
             bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8, edgecolor='none'))

plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['left'].set_color('#bdc3c7')
plt.gca().spines['bottom'].set_color('#bdc3c7')

plt.tight_layout()
plt.show()

# Elegant Country Sales Analysis - Pie Chart
top_5_countries = country_sales.head(5)
others_total = country_sales.iloc[5:].sum()

pie_data = list(top_5_countries.values) + [others_total]
pie_labels = list(top_5_countries.index) + ['Others']

# Elegant color palettes (choose one)
colors_palette_1 = ['#2E4057', '#048A81', '#54C6EB', '#B8860B', '#CD853F', '#D2B48C']  # Deep Ocean
colors = colors_palette_1

# Create figure with dark background for elegance
fig, ax = plt.subplots(figsize=(12, 10))
fig.patch.set_facecolor('#f8f9fa')

# Create pie chart with enhanced styling
wedges, texts, autotexts = ax.pie(pie_data,
                                  labels=pie_labels,
                                  autopct='%1.1f%%',
                                  colors=colors,
                                  startangle=90,
                                  explode=(0.08, 0.02, 0.02, 0.02, 0.02, 0.02),
                                  shadow=True,
                                  textprops={'fontsize': 14, 'fontweight': 'bold'},
                                  pctdistance=0.85,
                                  labeldistance=1.1)

# Style the percentage text
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')
    autotext.set_fontsize(12)
    autotext.set_bbox(dict(boxstyle='round,pad=0.3', facecolor='black', alpha=0.7))

# Style the labels
for text in texts:
    text.set_fontsize(13)
    text.set_fontweight('bold')
    text.set_color('#2c3e50')

# Add elegant title
plt.title('Global Sales Distribution by Country\nTop 5 Markets + Others',
          fontsize=20, fontweight='bold', color='#2c3e50', pad=30)

# Add a circle in the center for donut effect
centre_circle = plt.Circle((0,0), 0.60, fc='white', linewidth=2, edgecolor='#34495e')
fig.gca().add_artist(centre_circle)

# Add center text
plt.text(0, 0.1, 'Total Sales', ha='center', va='center', fontsize=14, fontweight='bold', color='#2c3e50')
total_sales = sum(pie_data)
plt.text(0, -0.1, f'${total_sales:,.0f}', ha='center', va='center', fontsize=16, fontweight='bold', color='#e74c3c')

# Add legend with sales values
legend_labels = [f'{label}: ${value:,.0f}' for label, value in zip(pie_labels, pie_data)]
plt.legend(wedges, legend_labels, title="Country Sales Breakdown", loc="center left",
           bbox_to_anchor=(1, 0, 0.5, 1), fontsize=11, title_fontsize=13)

plt.axis('equal')
plt.tight_layout()
plt.show()

# Elegant Country Customer Analysis - Pie Chart
country_customers = df.groupby('Country')['CustomerID'].nunique().sort_values(ascending=False)
top_5_countries = country_customers.head(5)
others_total = country_customers.iloc[5:].sum()

pie_data = list(top_5_countries.values) + [others_total]
pie_labels = list(top_5_countries.index) + ['Others']

# Elegant color palettes (choose one)
colors_palette_1 = ['#2E4057', '#048A81', '#54C6EB', '#B8860B', '#CD853F', '#D2B48C']  # Deep Ocean
colors = colors_palette_1

# Create figure with elegant background
fig, ax = plt.subplots(figsize=(12, 10))
fig.patch.set_facecolor('#f8f9fa')

# Create pie chart with enhanced styling
wedges, texts, autotexts = ax.pie(pie_data,
                                  labels=pie_labels,
                                  autopct='%1.1f%%',
                                  colors=colors,
                                  startangle=90,
                                  explode=(0.08, 0.02, 0.02, 0.02, 0.02, 0.02),
                                  shadow=True,
                                  textprops={'fontsize': 14, 'fontweight': 'bold'},
                                  pctdistance=0.85,
                                  labeldistance=1.1)

# Style the percentage text
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')
    autotext.set_fontsize(12)
    autotext.set_bbox(dict(boxstyle='round,pad=0.3', facecolor='black', alpha=0.7))

# Style the labels
for text in texts:
    text.set_fontsize(13)
    text.set_fontweight('bold')
    text.set_color('#2c3e50')

# Add elegant title
plt.title('Global Customer Distribution by Country\nTop 5 Markets + Others',
          fontsize=20, fontweight='bold', color='#2c3e50', pad=30)

# Add a circle in the center for donut effect
centre_circle = plt.Circle((0,0), 0.60, fc='white', linewidth=2, edgecolor='#34495e')
fig.gca().add_artist(centre_circle)

# Add center text
plt.text(0, 0.1, 'Total Customers', ha='center', va='center', fontsize=14, fontweight='bold', color='#2c3e50')
total_customers = sum(pie_data)
plt.text(0, -0.1, f'{total_customers:,}', ha='center', va='center', fontsize=16, fontweight='bold', color='#e74c3c')

# Add legend with customer counts
legend_labels = [f'{label}: {value:,} customers' for label, value in zip(pie_labels, pie_data)]
plt.legend(wedges, legend_labels, title="Country Customer Breakdown", loc="center left",
           bbox_to_anchor=(1, 0, 0.5, 1), fontsize=11, title_fontsize=13)

plt.axis('equal')
plt.tight_layout()
plt.show()

# Elegant Monthly Revenue Trend Analysis
df['Year'] = df['InvoiceDate'].dt.year
df['Month'] = df['InvoiceDate'].dt.month

monthly_revenue = df.groupby(['Year', 'Month'])['TotalPrice'].sum().reset_index()
monthly_revenue['YearMonth'] = pd.to_datetime(monthly_revenue[['Year', 'Month']].assign(day=1))

# Deep Ocean color palette
primary_color = '#2E4057'
secondary_color = '#048A81'
accent_color = '#54C6EB'

# Create elegant figure
fig, ax = plt.subplots(figsize=(14, 8))
fig.patch.set_facecolor('#f8f9fa')

# Plot line with enhanced styling
ax.plot(monthly_revenue['YearMonth'], monthly_revenue['TotalPrice'],
        color=primary_color, linewidth=3, marker='o', markersize=8,
        markerfacecolor=secondary_color, markeredgecolor='white',
        markeredgewidth=2, alpha=0.9)

# Fill area under curve for elegance
ax.fill_between(monthly_revenue['YearMonth'], monthly_revenue['TotalPrice'],
                alpha=0.3, color=accent_color)

# Styling
ax.set_title('Monthly Revenue Trend Analysis', fontsize=20, fontweight='bold',
             color='#2c3e50', pad=25)
ax.set_xlabel('Time Period', fontsize=14, fontweight='bold', color='#34495e')
ax.set_ylabel('Revenue ($)', fontsize=14, fontweight='bold', color='#34495e')

# Format y-axis to show currency
ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))

# Rotate x-axis labels
plt.xticks(rotation=45, fontsize=12, color='#2c3e50')
plt.yticks(fontsize=12, color='#2c3e50')

# Add grid
ax.grid(True, alpha=0.3, color='#bdc3c7', linestyle='--')
ax.set_facecolor('#fdfdfd')

# Remove top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_color('#bdc3c7')
ax.spines['bottom'].set_color('#bdc3c7')

# Add annotations for highest and lowest points
max_idx = monthly_revenue['TotalPrice'].idxmax()
min_idx = monthly_revenue['TotalPrice'].idxmin()

ax.annotate(f'Peak: ${monthly_revenue.loc[max_idx, "TotalPrice"]:,.0f}',
            xy=(monthly_revenue.loc[max_idx, 'YearMonth'], monthly_revenue.loc[max_idx, 'TotalPrice']),
            xytext=(10, 20), textcoords='offset points',
            bbox=dict(boxstyle='round,pad=0.5', fc=secondary_color, alpha=0.8),
            arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0', color=primary_color),
            fontsize=11, fontweight='bold', color='white')

ax.annotate(f'Low: ${monthly_revenue.loc[min_idx, "TotalPrice"]:,.0f}',
            xy=(monthly_revenue.loc[min_idx, 'YearMonth'], monthly_revenue.loc[min_idx, 'TotalPrice']),
            xytext=(10, -30), textcoords='offset points',
            bbox=dict(boxstyle='round,pad=0.5', fc='#e74c3c', alpha=0.8),
            arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0', color='#c0392b'),
            fontsize=11, fontweight='bold', color='white')

plt.tight_layout()
plt.show()

# Customer Analysis - RFM Segmentation
snapshot_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)

customer_data = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,
    'InvoiceNo': 'nunique',
    'TotalPrice': 'sum'
}).rename(columns={
    'InvoiceDate': 'Recency',
    'InvoiceNo': 'Frequency',
    'TotalPrice': 'Monetary'
}).reset_index()

customer_data['R_Score'] = pd.qcut(customer_data['Recency'], 5, labels=[5,4,3,2,1])
customer_data['F_Score'] = pd.qcut(customer_data['Frequency'].rank(method='first'), 5, labels=[1,2,3,4,5])
customer_data['M_Score'] = pd.qcut(customer_data['Monetary'], 5, labels=[1,2,3,4,5])

customer_data['RFM_Score'] = customer_data['R_Score'].astype(str) + customer_data['F_Score'].astype(str) + customer_data['M_Score'].astype(str)

segment_map = {
    r'[4-5][4-5][4-5]': 'Champions',
    r'[3-5][2-5][3-5]': 'Loyal Customers',
    r'[3-5][1-3][1-3]': 'Potential Loyalists',
    r'[4-5][1-2][1-2]': 'New Customers',
    r'[3-4][2-3][2-3]': 'Promising',
    r'[2-3][2-3][2-3]': 'Customers Needing Attention',
    r'[1-2][1-2][1-2]': 'At Risk',
    r'[1-2][4-5][4-5]': 'Cannot Lose Them',
    r'[1-2][1-2][4-5]': 'Hibernating',
}

customer_data['Segment'] = 'Others'
for pattern, segment in segment_map.items():
    customer_data.loc[customer_data['RFM_Score'].str.match(pattern), 'Segment'] = segment

segment_counts = customer_data['Segment'].value_counts()

# Deep Ocean color palette (extended for more segments)
colors_palette_1 = ['#2E4057', '#048A81', '#54C6EB', '#B8860B', '#CD853F', '#D2B48C',
                   '#4A90A4', '#5D737E', '#7A6B83', '#8B7765']

# Create elegant figure
fig, ax = plt.subplots(figsize=(12, 10))
fig.patch.set_facecolor('#ffffff')

# Create pie chart with enhanced styling
wedges, texts, autotexts = ax.pie(segment_counts.values,
                                  labels=segment_counts.index,
                                  autopct='%1.1f%%',
                                  colors=colors_palette_1[:len(segment_counts)],
                                  startangle=90,
                                  explode=[0.05 if i == 0 else 0.02 for i in range(len(segment_counts))],
                                  shadow=True,
                                  textprops={'fontsize': 12, 'fontweight': 'bold'},
                                  pctdistance=0.85,
                                  labeldistance=1.15)

# Style the percentage text
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')
    autotext.set_fontsize(11)
    autotext.set_bbox(dict(boxstyle='round,pad=0.3', facecolor='black', alpha=0.7))

# Style the labels
for text in texts:
    text.set_fontsize(11)
    text.set_fontweight('bold')
    text.set_color('#2c3e50')

# Add elegant title
plt.title('Customer Segmentation Analysis\nRFM-Based Strategic Groups',
          fontsize=20, fontweight='bold', color='#2c3e50', pad=30)

# Add a circle in the center for donut effect
centre_circle = plt.Circle((0,0), 0.60, fc='white', linewidth=2, edgecolor='#34495e')
fig.gca().add_artist(centre_circle)

# Add center text
total_customers_rfm = len(customer_data)
plt.text(0, 0.1, 'Total Customers', ha='center', va='center', fontsize=14, fontweight='bold', color='#2c3e50')
plt.text(0, -0.1, f'{total_customers_rfm:,}', ha='center', va='center', fontsize=16, fontweight='bold', color='#e74c3c')

# Add legend with customer counts
legend_labels = [f'{segment}: {count:,} customers' for segment, count in segment_counts.items()]
plt.legend(wedges, legend_labels, title="Customer Segment Breakdown", loc="lower left",
           bbox_to_anchor=(1, 0, 0.5, 1), fontsize=10, title_fontsize=12)

plt.axis('equal')
plt.tight_layout()
plt.show()

# Elegant Cohort Analysis
df['OrderPeriod'] = df['InvoiceDate'].dt.to_period('M')
df['CohortGroup'] = df.groupby('CustomerID')['InvoiceDate'].transform('min').dt.to_period('M')

df_cohort = df.groupby(['CohortGroup', 'OrderPeriod'])['CustomerID'].nunique().reset_index(drop=False)
df_cohort['PeriodNumber'] = (df_cohort['OrderPeriod'] - df_cohort['CohortGroup']).apply(attrgetter('n'))

cohort_table = df_cohort.pivot(index='CohortGroup', columns='PeriodNumber', values='CustomerID')
cohort_sizes = df.groupby('CohortGroup')['CustomerID'].nunique()
cohort_table = cohort_table.divide(cohort_sizes, axis=0)

# Create elegant figure with custom styling
plt.figure(figsize=(14, 10))
fig = plt.gcf()
fig.patch.set_facecolor('#ffffff')

# Create custom colormap based on Deep Ocean palette
from matplotlib.colors import LinearSegmentedColormap
colors_deep_ocean = ['#f8f9fa', '#54C6EB', '#048A81', '#2E4057']
cmap_custom = LinearSegmentedColormap.from_list('DeepOcean', colors_deep_ocean, N=100)

# Create enhanced heatmap
ax = sns.heatmap(cohort_table,
                 annot=True,
                 fmt='.1%',
                 cmap=cmap_custom,
                 linewidths=0.5,
                 linecolor='white',
                 cbar_kws={'shrink': 0.8, 'aspect': 30, 'pad': 0.02},
                 annot_kws={'fontsize': 10, 'fontweight': 'bold', 'color': 'black'},
                 square=False)

# Style the colorbar
cbar = ax.collections[0].colorbar
cbar.ax.tick_params(labelsize=11, colors='#2c3e50')
cbar.set_label('Retention Rate', fontsize=12, fontweight='bold', color='#2c3e50')

# Enhanced title and labels
plt.title('Customer Cohort Retention Analysis\nMonthly Retention Rates by Acquisition Cohort',
          fontsize=18, fontweight='bold', color='#2c3e50', pad=25)
plt.ylabel('Acquisition Cohort (Month-Year)', fontsize=14, fontweight='bold', color='#34495e')
plt.xlabel('Period Number (Months Since First Purchase)', fontsize=14, fontweight='bold', color='#34495e')

# Style the tick labels
plt.xticks(fontsize=11, color='#2c3e50', fontweight='bold')
plt.yticks(fontsize=11, color='#2c3e50', fontweight='bold', rotation=0)

# Add subtle border
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(2)
    spine.set_edgecolor('#bdc3c7')

plt.tight_layout()
plt.show()

# Enhanced Market Basket Analysis (without mlxtend - using optimized approach)
import networkx as nx

# Create basket matrix more efficiently
print("Creating basket matrix...")
basket = df.groupby(['InvoiceNo', 'StockCode'])['Quantity'].sum().unstack().fillna(0)
basket_sets = (basket > 0).astype(int)

# Get product descriptions for better readability
product_desc = df.groupby('StockCode')['Description'].first().to_dict()

# Calculate support more efficiently for top products only
print("Calculating frequent itemsets...")
product_support = basket_sets.sum() / len(basket_sets)
frequent_products = product_support[product_support > 0.05].index.tolist()[:20]  # Top 20 frequent products

frequent_itemsets = []
total_baskets = len(basket_sets)

# Only calculate for frequent products to speed up
for i, item1 in enumerate(frequent_products):
    for item2 in frequent_products[i+1:]:
        support = ((basket_sets[item1] > 0) & (basket_sets[item2] > 0)).sum() / total_baskets
        if support > 0.02:  # Higher threshold for better associations
            confidence_1_2 = support / product_support[item1]
            confidence_2_1 = support / product_support[item2]
            lift = support / (product_support[item1] * product_support[item2])

            frequent_itemsets.append({
                'item1': item1,
                'item2': item2,
                'support': support,
                'confidence_1_2': confidence_1_2,
                'confidence_2_1': confidence_2_1,
                'lift': lift
            })

# Sort by lift (most interesting associations)
frequent_itemsets = sorted(frequent_itemsets, key=lambda x: x['lift'], reverse=True)[:10]

# Create network visualization
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))
fig.patch.set_facecolor('#ffffff')

# Deep Ocean color palette
colors_palette_1 = ['#2E4057', '#048A81', '#54C6EB', '#B8860B', '#CD853F', '#D2B48C']

# Network Graph Visualization
G = nx.Graph()
for assoc in frequent_itemsets:
    item1_desc = product_desc.get(assoc['item1'], assoc['item1'])[:15]
    item2_desc = product_desc.get(assoc['item2'], assoc['item2'])[:15]
    G.add_edge(item1_desc, item2_desc, weight=assoc['lift'])

pos = nx.spring_layout(G, k=3, iterations=50)
weights = [G[u][v]['weight'] for u, v in G.edges()]

# Draw network
nx.draw_networkx_nodes(G, pos, ax=ax1, node_color=colors_palette_1[0],
                      node_size=1000, alpha=0.8)
nx.draw_networkx_edges(G, pos, ax=ax1, width=[w*2 for w in weights],
                      alpha=0.6, edge_color=colors_palette_1[1])
nx.draw_networkx_labels(G, pos, ax=ax1, font_size=9, font_weight='bold',
                       font_color='black')

ax1.set_title('Product Association Network\n(Node Size = Frequency, Edge Width = Lift)',
             fontsize=14, fontweight='bold', color='#2c3e50', pad=20)
ax1.axis('off')

# Bar Chart of Top Associations
if frequent_itemsets:
    associations = []
    lifts = []
    for assoc in frequent_itemsets[:8]:
        item1_desc = product_desc.get(assoc['item1'], assoc['item1'])[:20]
        item2_desc = product_desc.get(assoc['item2'], assoc['item2'])[:20]
        associations.append(f"{item1_desc}\n+ {item2_desc}")
        lifts.append(assoc['lift'])

    bars = ax2.barh(range(len(associations)), lifts,
                   color=colors_palette_1[:len(associations)], alpha=0.85,
                   edgecolor='#2c3e50', linewidth=1.2)

    ax2.set_yticks(range(len(associations)))
    ax2.set_yticklabels(associations, fontsize=10, fontweight='bold', color='#2c3e50')
    ax2.set_title('Top Product Associations by Lift Score',
                 fontsize=14, fontweight='bold', color='#2c3e50', pad=20)
    ax2.set_xlabel('Lift Score', fontsize=12, fontweight='bold', color='#34495e')
    ax2.grid(axis='x', alpha=0.3, color='#bdc3c7', linestyle='--')

    # Add value labels
    for i, (bar, value) in enumerate(zip(bars, lifts)):
        ax2.text(value + max(lifts) * 0.01, bar.get_y() + bar.get_height()/2,
                f'{value:.2f}', va='center', ha='left', fontsize=10,
                fontweight='bold', color='#2c3e50')

    # Clean styling
    ax2.spines['top'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    ax2.spines['left'].set_color('#bdc3c7')
    ax2.spines['bottom'].set_color('#bdc3c7')

plt.tight_layout()
plt.show()

# Color palette
primary_color = '#2E4057'
secondary_color = '#048A81'
accent_color = '#54C6EB'
colors = [primary_color, secondary_color, accent_color, '#B8DFD8']

# Asumsi bahwa 'frequent_items' sudah didefinisikan dari kode sebelumnya
df['TotalAmount'] = df['Quantity'] * df['UnitPrice']

df_positive = df[df['Quantity'] > 0].copy()

basket_data = df_positive.groupby(['InvoiceNo', 'Description'])['Quantity'].sum().unstack().fillna(0)

basket_binary = basket_data.applymap(lambda x: 1 if x > 0 else 0)

frequent_items = basket_binary.sum().sort_values(ascending=False)
frequent_items = frequent_items[frequent_items >= 20]
basket_binary = basket_binary[frequent_items.index]

# Buat figure dengan ukuran yang lebih besar untuk kejelasan
fig, ax1 = plt.subplots(figsize=(14, 10))
ax1.set_facecolor('#f8f9fa')

# Ambil 15 produk teratas
top_15_products = frequent_items.head(15)

# Buat gradient colors untuk setiap bar
bar_colors = []
for i in range(len(top_15_products)):
    if i == 0:  # Produk teratas menggunakan primary color
        bar_colors.append(primary_color)
    elif i < 3:  # Top 3 menggunakan secondary color
        bar_colors.append(secondary_color)
    elif i < 8:  # Top 8 menggunakan accent color
        bar_colors.append(accent_color)
    else:  # Sisanya menggunakan warna lebih terang
        bar_colors.append('#B8DFD8')

# Buat bar chart horizontal dengan spacing yang lebih baik
y_pos = np.arange(len(top_15_products))
bars = ax1.barh(y_pos, top_15_products.values,
                color=bar_colors,
                edgecolor='white',
                linewidth=1.5,
                height=0.7)

# Atur judul dan label dengan styling yang lebih baik
ax1.set_title('Most Frequently Purchased Products',
              fontsize=20, fontweight='bold', pad=25, color=primary_color)
ax1.set_xlabel('Purchase Frequency', fontsize=14, fontweight='bold', color=primary_color)

# Atur label sumbu y dengan nama produk (dibalik urutannya agar yang tertinggi di atas)
ax1.set_yticks(y_pos)
product_names = [name[:35] + '...' if len(name) > 35 else name for name in top_15_products.index]
ax1.set_yticklabels(product_names, fontsize=11, color=primary_color)

# Balik urutan agar produk dengan frekuensi tertinggi di atas
ax1.invert_yaxis()

# Tambahkan nilai frekuensi di setiap bar dengan styling yang lebih baik
for i, bar in enumerate(bars):
    width = bar.get_width()
    ax1.text(width + max(top_15_products.values) * 0.01,
             bar.get_y() + bar.get_height()/2,
             f'{int(width)}',
             va='center', ha='left', fontsize=11, fontweight='bold',
             color=primary_color,
             bbox=dict(boxstyle="round,pad=0.3", facecolor='white',
                      alpha=0.9, edgecolor=bar_colors[i], linewidth=1))

# Styling sumbu dan grid
ax1.grid(axis='x', alpha=0.3, linestyle='--', color=secondary_color)
ax1.spines['top'].set_visible(False)
ax1.spines['right'].set_visible(False)
ax1.spines['left'].set_color(primary_color)
ax1.spines['bottom'].set_color(primary_color)

# Atur tick colors
ax1.tick_params(axis='x', colors=primary_color, labelsize=10)
ax1.tick_params(axis='y', colors=primary_color, labelsize=11)

# Set background color
fig.patch.set_facecolor('white')

# Tambahkan informasi statistik
total_products = len(frequent_items)
avg_frequency = top_15_products.mean()
max_frequency = top_15_products.max()

stats_text = f"Top 15 of {total_products} products | Avg Frequency: {avg_frequency:.0f} | Max: {max_frequency:.0f}"
ax1.text(0.02, 0.98, stats_text, transform=ax1.transAxes,
         fontsize=10, verticalalignment='top',
         bbox=dict(boxstyle="round,pad=0.4", facecolor=accent_color, alpha=0.3))

plt.tight_layout()
plt.show()